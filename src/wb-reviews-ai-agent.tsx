import React, { useState, useEffect } from 'react';
import { 
  Layout, 
  Card, 
  Button, 
  Input, 
  Alert, 
  Typography, 
  Tabs, 
  Space, 
  Rate, 
  Tag, 
  Divider,
  Row,
  Col,
  Spin,
  Empty,
  Collapse,
  Drawer,
  Form,
  ConfigProvider,
  Image,
  Modal,
  Badge,
  Checkbox,
  Dropdown,
  Menu,
  Tooltip
} from 'antd';
import { 
  SendOutlined, 
  ReloadOutlined, 
  MessageOutlined, 
  SettingOutlined, 
  RobotOutlined,
  EditOutlined,
  CheckOutlined,
  CloseOutlined,
  PictureOutlined,
  VideoCameraOutlined,
  PlayCircleOutlined,
  EyeOutlined,
  FilterOutlined,
  StarOutlined,
  StarFilled,
  LeftOutlined,
  RightOutlined
} from '@ant-design/icons';

const { Header, Content } = Layout;
const { Title, Text, Paragraph } = Typography;
const { TextArea } = Input;
const { Panel } = Collapse;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ PhotoInfo
const getPhotoUrl = (photo: PhotoInfo, useFullSize = false): string => {
  return useFullSize ? photo.fullSize : photo.miniSize;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
const getAnswerStatusDisplay = (state?: string, editable?: boolean) => {
  const statusMap: Record<string, { text: string; color: string; icon: string; description: string }> = {
    'wbRu': {
      text: '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
      color: 'success',
      icon: '‚úÖ',
      description: '–û—Ç–≤–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ Wildberries –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    },
    'none': {
      text: '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞',
      color: 'default',
      icon: '‚ö´',
      description: '–ù–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤ –µ—â–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'
    },
    'suppliersPortalSynch': {
      text: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
      color: 'processing',
      icon: 'üîÑ',
      description: '–û—Ç–≤–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ—Ä—Ç–∞–ª–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'
    }
  };

  const status = statusMap[state || 'none'] || {
    text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π: ${state}`,
    color: 'warning',
    icon: '‚ùì',
    description: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${state}`
  };

  return {
    ...status,
    editable: editable === true,
    editableText: editable ? '–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
  };
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface VideoInfo {
  previewImage: string;
  link: string;
  durationSec: number;
}

interface PhotoInfo {
  fullSize: string;
  miniSize: string;
}

interface FeedbackData {
  id: string;
  userName?: string;
  text?: string;
  pros?: string;
  cons?: string;
  productValuation?: number;
  createdDate: string;
  productDetails?: {
    productName?: string;
    brandName?: string;
    supplierArticle?: string;
  };
  answer?: {
    text: string;
    state?: string;      // wbRu, none, suppliersPortalSynch, etc.
    editable?: boolean;  // –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤ —Ç–µ—á–µ–Ω–∏–µ 60 –¥–Ω–µ–π)
  };
  // –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Wildberries
  photoLinks?: PhotoInfo[];
  video?: VideoInfo;
}

interface StatsData {
  countUnanswered: number;
  valuation: number;
}

interface APIResponse<T = any> {
  data?: T;
  error?: boolean;
  errorText?: string;
  success?: boolean;
}

// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Wildberries
class WildberriesAPI {
  private token: string;
  private baseUrl: string;

  constructor(token: string) {
    this.token = token;
    this.baseUrl = 'https://feedbacks-api.wildberries.ru';
  }

  async getFeedbacks(isAnswered = false, take = 100, skip = 0): Promise<APIResponse<{ feedbacks: FeedbackData[] }>> {
    try {
      const response = await fetch(
        `${this.baseUrl}/api/v1/feedbacks?isAnswered=${isAnswered}&take=${take}&skip=${skip}&order=dateDesc`,
        {
          headers: {
            'Authorization': this.token,
            'Content-Type': 'application/json'
          }
        }
      );
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return await response.json();
    } catch (error) {
      return { error: true, errorText: (error as Error).message };
    }
  }

  async replyToFeedback(feedbackId: string, text: string): Promise<APIResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/feedbacks/answer`, {
        method: 'POST',
        headers: {
          'Authorization': this.token,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id: feedbackId, text })
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return { success: true };
    } catch (error) {
      return { error: true, errorText: (error as Error).message };
    }
  }

  async getUnansweredCount(): Promise<APIResponse<StatsData>> {
    try {
      const response = await fetch(`${this.baseUrl}/api/v1/feedbacks/count-unanswered`, {
        headers: {
          'Authorization': this.token,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      return await response.json();
    } catch (error) {
      return { error: true, errorText: (error as Error).message };
    }
  }
}

// OpenAI API –∫–ª–∏–µ–Ω—Ç
class OpenAIAPI {
  private apiKey: string;
  private baseUrl: string;

  constructor(apiKey: string) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.openai.com/v1';
  }

  async generateReply(feedback: FeedbackData, instructions = ''): Promise<string> {
    const systemPrompt = `–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Wildberries. 
    ${instructions ? `–û—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${instructions}` : ''}
    
    –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤:
    1. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
    2. –ë–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –æ—Ç–∑—ã–≤
    3. –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π - –∏–∑–≤–∏–Ω–∏—Å—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ
    4. –ï—Å–ª–∏ –æ—Ç–∑—ã–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π - –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏ —Å–Ω–æ–≤–∞
    5. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
    6. –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
    7. –ï—Å–ª–∏ –∫ –æ—Ç–∑—ã–≤—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞–≥–ª—è–¥–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    const hasPhotos = !!(feedback.photoLinks?.length);
    const hasVideo = !!feedback.video;
    const hasMedia = hasPhotos || hasVideo;
    
    let mediaInfo = '';
    if (hasMedia) {
      const mediaTypes = [];
      if (hasPhotos) mediaTypes.push('—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
      if (hasVideo) mediaTypes.push('–≤–∏–¥–µ–æ');
      mediaInfo = `\n–ö –æ—Ç–∑—ã–≤—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã: ${mediaTypes.join(' –∏ ')}`;
    }

    const userPrompt = `–û—Ç–∑—ã–≤ –æ—Ç ${feedback.userName || '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è'}:
    –¢–æ–≤–∞—Ä: ${feedback.productDetails?.productName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}
    –û—Ü–µ–Ω–∫–∞: ${feedback.productValuation}/5
    –¢–µ–∫—Å—Ç: ${feedback.text || ''}
    ${feedback.pros ? `–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞: ${feedback.pros}` : ''}
    ${feedback.cons ? `–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: ${feedback.cons}` : ''}${mediaInfo}
    
    –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤.`;

    try {
      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
          ],
          temperature: 0.7,
          max_tokens: 150
        })
      });

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${(error as Error).message}`);
    }
  }
}

// –ü—Ä–æ–ø—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ—Ç–∑—ã–≤–∞
interface FeedbackCardProps {
  feedback: FeedbackData;
  onReply: (feedbackId: string, text: string) => void;
  aiReply?: string;
  onGenerateReply: (feedback: FeedbackData) => void;
  isGenerating: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function SafeImage({ src, alt, style, width, height, onClick }: {
  src: string;
  alt?: string;
  style?: React.CSSProperties;
  width?: number;
  height?: number;
  onClick?: () => void;
}) {
  const [imageStatus, setImageStatus] = useState<'loading' | 'success' | 'error'>('loading');
  const [imageSrc, setImageSrc] = useState(src);
  const [proxyIndex, setProxyIndex] = useState(-1);

  // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
  const corsProxies = [
    (url: string) => url, // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
    (url: string) => `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(url)}`,
    (url: string) => `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`,
    (url: string) => `https://corsproxy.io/?${encodeURIComponent(url)}`,
    (url: string) => `https://cors-anywhere.herokuapp.com/${url}`,
    (url: string) => `https://thingproxy.freeboard.io/fetch/${url}`
  ];

  const handleImageLoad = () => {
    setImageStatus('success');
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageSrc);
  };

  const handleImageError = () => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageSrc);
    
    const nextProxyIndex = proxyIndex + 1;
    if (nextProxyIndex < corsProxies.length) {
      // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
      const nextUrl = corsProxies[nextProxyIndex](src);
      console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ ${nextProxyIndex + 1}:`, nextUrl);
      setImageSrc(nextUrl);
      setProxyIndex(nextProxyIndex);
      setImageStatus('loading');
    } else {
      // –í—Å–µ –ø—Ä–æ–∫—Å–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞–Ω—ã
      console.log('üö´ –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ—É–¥–∞—á–Ω—ã –¥–ª—è:', src);
      setImageStatus('error');
    }
  };

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ URL
  useEffect(() => {
    setImageStatus('loading');
    setProxyIndex(-1);
    setImageSrc(src);
  }, [src]);

  if (imageStatus === 'error') {
    return (
      <div
        style={{
          width: width || '100%',
          height: height || 80,
          backgroundColor: '#f5f5f5',
          border: '1px dashed #d9d9d9',
          borderRadius: 6,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          cursor: onClick ? 'pointer' : 'default',
          padding: 8,
          ...style
        }}
        onClick={onClick}
      >
        <PictureOutlined style={{ fontSize: 20, color: '#ccc', marginBottom: 4 }} />
        <Text type="secondary" style={{ fontSize: 10, textAlign: 'center' }}>
          –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ<br />
          <Button 
            type="link" 
            size="small" 
            style={{ padding: 0, height: 'auto', fontSize: 10 }}
            onClick={(e) => {
              e.stopPropagation();
              window.open(src, '_blank');
            }}
          >
            –û—Ç–∫—Ä—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
          </Button>
        </Text>
      </div>
    );
  }

  return (
    <div style={{ position: 'relative', display: 'inline-block' }}>
      {imageStatus === 'loading' && (
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: width || '100%',
            height: height || 80,
            backgroundColor: '#f5f5f5',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            borderRadius: 6,
            zIndex: 1
          }}
        >
          <Spin size="small" />
          {proxyIndex >= 0 && (
            <Text style={{ position: 'absolute', bottom: 2, fontSize: 8, color: '#999' }}>
              –ü—Ä–æ–∫—Å–∏ {proxyIndex + 1}
            </Text>
          )}
        </div>
      )}
      <img
        src={imageSrc}
        alt={alt}
        style={{
          width: width || '100%',
          height: height || 80,
          objectFit: 'cover',
          borderRadius: 6,
          cursor: onClick ? 'pointer' : 'default',
          ...style
        }}
        onLoad={handleImageLoad}
        onError={handleImageError}
        onClick={onClick}
      />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
function MediaGallery({ feedback }: { feedback: FeedbackData }) {
  const [visible, setVisible] = useState(false);
  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewImage, setPreviewImage] = useState('');
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  
  const photos = feedback.photoLinks || [];
  const video = feedback.video;
  
  // –û—Ç–ª–∞–¥–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ loadFeedbacks - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
  
  const totalMediaCount = photos.length + (video ? 1 : 0);

  if (totalMediaCount === 0) return null;

  const handlePreview = (url: string) => {
    setPreviewImage(url);
    setPreviewOpen(true);
  };

  const handlePhotoNavigation = (direction: 'prev' | 'next') => {
    if (direction === 'next') {
      setCurrentPhotoIndex((prev) => (prev + 1) % photos.length);
    } else {
      setCurrentPhotoIndex((prev) => (prev - 1 + photos.length) % photos.length);
    }
  };

  const handleThumbnailClick = (index: number) => {
    setCurrentPhotoIndex(index);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (!visible || photos.length <= 1) return;
      
      if (e.key === 'ArrowLeft') {
        handlePhotoNavigation('prev');
      } else if (e.key === 'ArrowRight') {
        handlePhotoNavigation('next');
      } else if (e.key === 'Escape') {
        setVisible(false);
      }
    };

    if (visible) {
      document.addEventListener('keydown', handleKeyPress);
      return () => document.removeEventListener('keydown', handleKeyPress);
    }
  }, [visible, photos.length, currentPhotoIndex]);

  return (
    <div style={{ marginTop: 16 }}>
      <Space direction="vertical" size="small" style={{ width: '100%' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
        <Space>
          {photos.length > 0 && (
            <Badge count={photos.length} color="blue">
              <Tag icon={<PictureOutlined />} color="blue">
                –§–æ—Ç–æ
              </Tag>
            </Badge>
          )}
          {video && (
            <Tag icon={<VideoCameraOutlined />} color="red">
              –í–∏–¥–µ–æ
            </Tag>
          )}
        </Space>

        {/* –ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
        {photos.length > 0 && (
          <div>
            <Row gutter={[8, 8]}>
              {photos.slice(0, 4).map((photo, index) => (
                <Col key={index}>
                  <SafeImage
                    width={80}
                    height={80}
                    src={getPhotoUrl(photo)}
                    alt={`–§–æ—Ç–æ ${index + 1}`}
                    onClick={() => {
                      setCurrentPhotoIndex(index);
                      setVisible(true);
                    }}
                  />
                </Col>
              ))}
              {photos.length > 4 && (
                <Col>
                  <div
                    style={{
                      width: 80,
                      height: 80,
                      backgroundColor: '#f5f5f5',
                      border: '1px dashed #d9d9d9',
                      borderRadius: 6,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      cursor: 'pointer',
                      fontSize: '12px',
                      color: '#666'
                    }}
                    onClick={() => setVisible(true)}
                  >
                    +{photos.length - 4}
                  </div>
                </Col>
              )}
            </Row>
          </div>
        )}

        {/* –ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ */}
        {video && (
          <div>
            <Row gutter={[8, 8]}>
              <Col>
                <div
                  style={{
                    position: 'relative',
                    width: 120,
                    height: 80,
                    cursor: 'pointer',
                    borderRadius: 6,
                    overflow: 'hidden',
                    backgroundColor: '#000'
                  }}
                  onClick={() => window.open(video.link, '_blank')}
                >
                  <SafeImage
                    src={video.previewImage}
                    alt="–ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ"
                    width={120}
                    height={80}
                    style={{ backgroundColor: '#000' }}
                  />
                  {/* –ò–∫–æ–Ω–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
                  <div
                    style={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)',
                      fontSize: 24,
                      color: 'rgba(255, 255, 255, 0.9)',
                      textShadow: '0 0 4px rgba(0,0,0,0.8)',
                      pointerEvents: 'none'
                    }}
                  >
                    <PlayCircleOutlined />
                  </div>
                  {/* –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ */}
                  <div
                    style={{
                      position: 'absolute',
                      bottom: 4,
                      right: 4,
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      color: 'white',
                      padding: '2px 6px',
                      borderRadius: 4,
                      fontSize: '10px',
                      fontWeight: 'bold',
                      pointerEvents: 'none'
                    }}
                  >
                    {Math.floor(video.durationSec / 60)}:{(video.durationSec % 60).toString().padStart(2, '0')}
                  </div>
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä HLS –≤–∏–¥–µ–æ */}
                  <div
                    style={{
                      position: 'absolute',
                      top: 4,
                      left: 4,
                      backgroundColor: 'rgba(220, 53, 69, 0.8)',
                      color: 'white',
                      padding: '1px 4px',
                      borderRadius: 3,
                      fontSize: '8px',
                      fontWeight: 'bold',
                      pointerEvents: 'none'
                    }}
                  >
                    HLS
                  </div>
                </div>
              </Col>
            </Row>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
        {totalMediaCount > 5 && (
          <Button
            type="link"
            size="small"
            icon={<EyeOutlined />}
            onClick={() => {
              setCurrentPhotoIndex(0);
              setVisible(true);
            }}
            style={{ padding: 0 }}
          >
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã ({totalMediaCount})
          </Button>
        )}
      </Space>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
      <Modal
        title={`–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç–∑—ã–≤–∞${photos.length > 0 ? ` - –§–æ—Ç–æ ${currentPhotoIndex + 1} –∏–∑ ${photos.length}` : ''}`}
        open={visible}
        onCancel={() => setVisible(false)}
        footer={null}
        width="90vw"
        style={{ maxWidth: '1200px' }}
        centered
      >
        <Space direction="vertical" size="middle" style={{ width: '100%' }}>
          {photos.length > 0 && (
            <div>
              {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π */}
              <div style={{ position: 'relative', textAlign: 'center', marginBottom: 16 }}>
                <div style={{
                  width: '100%',
                  height: '70vh',
                  minHeight: '400px',
                  maxHeight: '800px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: '#000',
                  borderRadius: 8,
                  overflow: 'hidden',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  border: '2px solid transparent'
                }}
                onClick={() => window.open(getPhotoUrl(photos[currentPhotoIndex], true), '_blank')}
                onMouseEnter={(e) => {
                  e.currentTarget.style.borderColor = '#1890ff';
                  e.currentTarget.style.boxShadow = '0 4px 20px rgba(24, 144, 255, 0.3)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.borderColor = 'transparent';
                  e.currentTarget.style.boxShadow = 'none';
                }}
                >
                  <SafeImage
                    src={getPhotoUrl(photos[currentPhotoIndex], true)}
                    alt={`–§–æ—Ç–æ ${currentPhotoIndex + 1}`}
                    style={{ 
                      width: '100%', 
                      height: '100%',
                      objectFit: 'contain',
                      backgroundColor: 'transparent'
                    }}
                  />
                </div>
                
                                 {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
                 {photos.length > 1 && (
                   <>
                     <Tooltip title="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (‚Üê)" placement="left">
                       <Button
                         shape="circle"
                         icon={<LeftOutlined />}
                         style={{
                           position: 'absolute',
                           left: 16,
                           top: '50%',
                           transform: 'translateY(-50%)',
                           backgroundColor: 'rgba(0, 0, 0, 0.7)',
                           borderColor: 'rgba(255, 255, 255, 0.3)',
                           color: 'white',
                           fontSize: '16px',
                           boxShadow: '0 2px 8px rgba(0,0,0,0.3)'
                         }}
                         onClick={() => handlePhotoNavigation('prev')}
                       />
                     </Tooltip>
                     <Tooltip title="–°–ª–µ–¥—É—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (‚Üí)" placement="right">
                       <Button
                         shape="circle"
                         icon={<RightOutlined />}
                         style={{
                           position: 'absolute',
                           right: 16,
                           top: '50%',
                           transform: 'translateY(-50%)',
                           backgroundColor: 'rgba(0, 0, 0, 0.7)',
                           borderColor: 'rgba(255, 255, 255, 0.3)',
                           color: 'white',
                           fontSize: '16px',
                           boxShadow: '0 2px 8px rgba(0,0,0,0.3)'
                         }}
                         onClick={() => handlePhotoNavigation('next')}
                       />
                     </Tooltip>
                   </>
                 )}
                
                                 {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
                 <div style={{
                   position: 'absolute',
                   bottom: 16,
                   left: '50%',
                   transform: 'translateX(-50%)',
                   display: 'flex',
                   gap: '8px',
                   alignItems: 'center'
                 }}>
                   {photos.length > 1 && (
                     <div style={{
                       backgroundColor: 'rgba(0, 0, 0, 0.7)',
                       color: 'white',
                       padding: '4px 12px',
                       borderRadius: 16,
                       fontSize: '12px'
                     }}>
                       {currentPhotoIndex + 1} / {photos.length}
                     </div>
                   )}
                   <div style={{
                     backgroundColor: 'rgba(0, 0, 0, 0.7)',
                     color: 'white',
                     padding: '4px 12px',
                     borderRadius: 16,
                     fontSize: '10px',
                     opacity: 0.8
                   }}>
                     –ö–ª–∏–∫ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                   </div>
                 </div>
              </div>

              {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è */}
              {photos.length > 1 && (
                <div>
                  <Typography.Title level={5} style={{ marginBottom: 8 }}>
                    <PictureOutlined /> –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                  </Typography.Title>
                  <Row gutter={[8, 8]} justify="center">
                    {photos.map((photo, index) => (
                      <Col key={index}>
                        <div
                          style={{
                            border: index === currentPhotoIndex ? '3px solid #1890ff' : '2px solid transparent',
                            borderRadius: 8,
                            overflow: 'hidden',
                            cursor: 'pointer',
                            transition: 'all 0.2s'
                          }}
                          onClick={() => handleThumbnailClick(index)}
                        >
                          <SafeImage
                            src={getPhotoUrl(photo)}
                            alt={`–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ ${index + 1}`}
                            width={80}
                            height={80}
                            style={{ 
                              opacity: index === currentPhotoIndex ? 1 : 0.7,
                              transition: 'opacity 0.2s'
                            }}
                          />
                        </div>
                      </Col>
                    ))}
                  </Row>
                </div>
              )}
            </div>
          )}

          {video && (
            <div>
              <Typography.Title level={5}>
                <VideoCameraOutlined /> –í–∏–¥–µ–æ ({Math.floor(video.durationSec / 60)}:{(video.durationSec % 60).toString().padStart(2, '0')})
              </Typography.Title>
              <Row gutter={[12, 12]}>
                <Col xs={12} sm={8} md={6}>
                  <div
                    style={{
                      position: 'relative',
                      width: '100%',
                      height: 120,
                      cursor: 'pointer',
                      borderRadius: 6,
                      overflow: 'hidden',
                      backgroundColor: '#000'
                    }}
                    onClick={() => window.open(video.link, '_blank')}
                  >
                    <SafeImage
                      src={video.previewImage}
                      alt="–ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ"
                      height={120}
                      style={{ width: '100%', backgroundColor: '#000' }}
                    />
                    <div
                      style={{
                        position: 'absolute',
                        top: '50%',
                        left: '50%',
                        transform: 'translate(-50%, -50%)',
                        fontSize: 32,
                        color: 'rgba(255, 255, 255, 0.9)',
                        textShadow: '0 0 6px rgba(0,0,0,0.8)',
                        pointerEvents: 'none'
                      }}
                    >
                      <PlayCircleOutlined />
                    </div>
                    {/* –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ */}
                    <div
                      style={{
                        position: 'absolute',
                        bottom: 8,
                        right: 8,
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        color: 'white',
                        padding: '4px 8px',
                        borderRadius: 4,
                        fontSize: '12px',
                        fontWeight: 'bold',
                        pointerEvents: 'none'
                      }}
                    >
                      {Math.floor(video.durationSec / 60)}:{(video.durationSec % 60).toString().padStart(2, '0')}
                    </div>
                    {/* HLS –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
                    <div
                      style={{
                        position: 'absolute',
                        top: 8,
                        left: 8,
                        backgroundColor: 'rgba(220, 53, 69, 0.9)',
                        color: 'white',
                        padding: '2px 6px',
                        borderRadius: 3,
                        fontSize: '10px',
                        fontWeight: 'bold',
                        pointerEvents: 'none'
                      }}
                    >
                      HLS
                    </div>
                  </div>
                </Col>
              </Row>
            </div>
          )}
        </Space>
      </Modal>

      {/* –°–∫—Ä—ã—Ç–æ–µ –ø—Ä–µ–≤—å—é –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */}
      <Image
        style={{ display: 'none' }}
        src={previewImage}
        preview={{
          visible: previewOpen,
          onVisibleChange: (vis) => setPreviewOpen(vis),
        }}
      />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–∑—ã–≤–∞
function FeedbackCard({ feedback, onReply, aiReply, onGenerateReply, isGenerating }: FeedbackCardProps) {
  const [replyText, setReplyText] = useState(aiReply || '');
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    setReplyText(aiReply || '');
  }, [aiReply]);

  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
  const hasMedia = !!(
    feedback.photoLinks?.length || 
    feedback.video
  );

  return (
    <Card 
      style={{ marginBottom: 16 }}
      title={
        <Row justify="space-between" align="middle">
          <Col>
            <Space direction="vertical" size={0}>
              <Title level={4} style={{ margin: 0 }}>
                {feedback.productDetails?.productName || '–¢–æ–≤–∞—Ä'}
                {hasMedia && (
                  <Space style={{ marginLeft: 8 }}>
                    <Tag icon={<PictureOutlined />} color="blue">
                      –° –º–µ–¥–∏–∞
                    </Tag>
                  </Space>
                )}
              </Title>
              <Text type="secondary">
                {feedback.productDetails?.brandName} ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {feedback.productDetails?.supplierArticle}
              </Text>
            </Space>
          </Col>
          <Col>
            <Space direction="vertical" size={0} align="end">
              <Rate disabled value={feedback.productValuation || 0} />
              <Text type="secondary" style={{ fontSize: '12px' }}>
                {formatDate(feedback.createdDate)}
              </Text>
            </Space>
          </Col>
        </Row>
      }
    >
      <Space direction="vertical" size="middle" style={{ width: '100%' }}>
        <div>
          <Text strong>{feedback.userName || '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'}</Text>
          {feedback.text && <Paragraph style={{ marginTop: 8 }}>{feedback.text}</Paragraph>}
          {feedback.pros && (
            <Paragraph>
              <Tag color="green">–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞:</Tag> {feedback.pros}
            </Paragraph>
          )}
          {feedback.cons && (
            <Paragraph>
              <Tag color="red">–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:</Tag> {feedback.cons}
            </Paragraph>
          )}
          
          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ */}
          <MediaGallery feedback={feedback} />
        </div>

        {feedback.answer ? (
          <div>
            {(() => {
              const statusInfo = getAnswerStatusDisplay(feedback.answer.state, feedback.answer.editable);
              return (
                <Alert
                  message={
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <span>–í–∞—à –æ—Ç–≤–µ—Ç:</span>
                      <Space>
                        <Tooltip title={statusInfo.description}>
                          <Tag color={statusInfo.color}>
                            {statusInfo.icon} {statusInfo.text}
                          </Tag>
                        </Tooltip>
                        {statusInfo.editable && (
                          <Tooltip title="–û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –¥–Ω–µ–π">
                            <Tag color="blue">
                              <EditOutlined /> –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π
                            </Tag>
                          </Tooltip>
                        )}
                      </Space>
                    </div>
                  }
                  description={feedback.answer.text}
                  type={statusInfo.color === 'success' ? 'success' : 'info'}
                  showIcon
                />
              );
            })()}
          </div>
        ) : (
          <Space direction="vertical" size="middle" style={{ width: '100%' }}>
            {replyText && (
              <Card size="small" style={{ backgroundColor: '#f5f5f5' }}>
                <Row justify="space-between" align="top">
                  <Col>
                    <Text strong style={{ color: '#1890ff' }}>
                      <RobotOutlined /> –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:
                    </Text>
                  </Col>
                  <Col>
                    <Button 
                      type="link" 
                      size="small"
                      icon={isEditing ? <CheckOutlined /> : <EditOutlined />}
                      onClick={() => setIsEditing(!isEditing)}
                    >
                      {isEditing ? '–ì–æ—Ç–æ–≤–æ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                    </Button>
                  </Col>
                </Row>
                {isEditing ? (
                  <TextArea
                    value={replyText}
                    onChange={(e) => setReplyText(e.target.value)}
                    rows={4}
                    style={{ marginTop: 8 }}
                  />
                ) : (
                  <Paragraph style={{ marginTop: 8, marginBottom: 0 }}>
                    {replyText}
                  </Paragraph>
                )}
              </Card>
            )}

            <Space>
              <Button
                type="primary"
                icon={<RobotOutlined />}
                loading={isGenerating}
                onClick={() => onGenerateReply(feedback)}
              >
                {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : (replyText ? '–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç')}
              </Button>

              {replyText && (
                <Button
                  type="primary"
                  icon={<SendOutlined />}
                  style={{ backgroundColor: '#52c41a', borderColor: '#52c41a' }}
                  onClick={() => onReply(feedback.id, replyText)}
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
                </Button>
              )}
            </Space>
          </Space>
        )}
      </Space>
    </Card>
  );
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function WildberriesReviewsAI() {
  const [wbToken, setWbToken] = useState(import.meta.env.VITE_WB || '');
  const [openaiKey, setOpenaiKey] = useState(import.meta.env.VITE_OPENAI_API_KEY || '');
  const [isConnected, setIsConnected] = useState(false);
  const [activeTab, setActiveTab] = useState('unanswered');
  const [allFeedbacks, setAllFeedbacks] = useState<FeedbackData[]>([]); // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
  const [filteredFeedbacks, setFilteredFeedbacks] = useState<FeedbackData[]>([]); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [stats, setStats] = useState<StatsData | null>(null);
  const [aiReplies, setAiReplies] = useState<Record<string, string>>({});
  const [generatingFor, setGeneratingFor] = useState<string | null>(null);
  const [aiInstructions, setAiInstructions] = useState('');
  const [showSettings, setShowSettings] = useState(false);
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const [selectedRatings, setSelectedRatings] = useState<number[]>([1, 2, 3, 4, 5]); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –æ—Ü–µ–Ω–∫–∏
  const [showFilters, setShowFilters] = useState(false);
  const [hasMedia, setHasMedia] = useState<boolean | null>(null); // null = –≤—Å–µ, true = —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞, false = —Ç–æ–ª—å–∫–æ –±–µ–∑ –º–µ–¥–∏–∞

  const wbApi = React.useRef<WildberriesAPI | null>(null);
  const openaiApi = React.useRef<OpenAIAPI | null>(null);

  // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
  const filterFeedbacks = (feedbacks: FeedbackData[]) => {
    return feedbacks.filter(feedback => {
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
      const ratingMatch = selectedRatings.includes(feedback.productValuation || 0);
      
      // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º
      const feedbackHasMedia = !!(feedback.photoLinks?.length || feedback.video);
      const mediaMatch = hasMedia === null || feedbackHasMedia === hasMedia;
      
      return ratingMatch && mediaMatch;
    });
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    const filtered = filterFeedbacks(allFeedbacks);
    setFilteredFeedbacks(filtered);
  }, [allFeedbacks, selectedRatings, hasMedia]);

  const connect = async () => {
    if (!wbToken || !openaiKey) {
      setError('–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞');
      return;
    }

    setLoading(true);
    setError('');

    wbApi.current = new WildberriesAPI(wbToken);
    openaiApi.current = new OpenAIAPI(openaiKey);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WB
    const statsResult = await wbApi.current.getUnansweredCount();
    if (statsResult.error) {
      setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WB: ${statsResult.errorText}`);
      setLoading(false);
      return;
    }

    setStats(statsResult.data || null);
    setIsConnected(true);
    setLoading(false);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
    await loadFeedbacks();
  };

  const loadFeedbacks = async () => {
    if (!wbApi.current) return;

    setLoading(true);
    setError('');

    const isAnswered = activeTab === 'answered';
    const result = await wbApi.current.getFeedbacks(isAnswered, 100); // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    if (result.error) {
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${result.errorText}`);
      setAllFeedbacks([]);
    } else {
      const feedbacks = result.data?.feedbacks || [];
      setAllFeedbacks(feedbacks);
      
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const withMedia = feedbacks.filter(f => f.photoLinks?.length || f.video);
      const photoCount = feedbacks.reduce((sum, f) => sum + (f.photoLinks?.length || 0), 0);
      const videoCount = feedbacks.filter(f => f.video).length;
      
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:`, {
        totalFeedbacks: feedbacks.length,
        withMedia: withMedia.length,
        photoCount,
        videoCount
      });

      // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
      const answerStatuses = new Set<string>();
      const answerStats = {
        total: feedbacks.length,
        withAnswers: 0,
        editableAnswers: 0,
        statusBreakdown: {} as Record<string, number>
      };

      feedbacks.forEach(f => {
        if (f.answer) {
          answerStats.withAnswers++;
          if (f.answer.editable) {
            answerStats.editableAnswers++;
          }
          const state = f.answer.state || 'none';
          answerStatuses.add(state);
          answerStats.statusBreakdown[state] = (answerStats.statusBreakdown[state] || 0) + 1;
        }
      });

      console.log(`üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤:`, {
        ...answerStats,
        allStatuses: Array.from(answerStatuses)
      });
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–≤—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
      if (withMedia.length > 0) {
        console.log(`üîç –ü—Ä–∏–º–µ—Ä—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:`, withMedia.slice(0, 5).map(f => ({
          feedbackId: f.id,
          userName: f.userName,
          photos: {
            count: f.photoLinks?.length || 0,
            urls: f.photoLinks?.slice(0, 3).map(photo => ({
              miniSize: photo.miniSize,
              fullSize: photo.fullSize
            })) // –ü–µ—Ä–≤—ã–µ 3 URL
          },
          video: f.video ? {
            hasVideo: true,
            previewImage: f.video.previewImage,
            videoLink: f.video.link,
            duration: f.video.durationSec
          } : null
        })));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const photoUrls = feedbacks.flatMap(f => 
          (f.photoLinks || []).map(photo => getPhotoUrl(photo, true))
        );
        const domains = [...new Set(photoUrls.map(url => {
          try {
            return new URL(url).hostname;
          } catch {
            return 'invalid-url';
          }
        }))];
        console.log(`üåê –î–æ–º–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`, domains);
      } else {
        console.log(`‚ÑπÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –æ—Ç–∑—ã–≤–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
    }

    setLoading(false);
  };

  const generateReply = async (feedback: FeedbackData) => {
    if (!openaiApi.current) return;

    setGeneratingFor(feedback.id);
    try {
      const reply = await openaiApi.current.generateReply(feedback, aiInstructions);
      setAiReplies(prev => ({ ...prev, [feedback.id]: reply }));
    } catch (error) {
      setError((error as Error).message);
    }
    setGeneratingFor(null);
  };

  const sendReply = async (feedbackId: string, text: string) => {
    if (!wbApi.current) return;

    setLoading(true);
    const result = await wbApi.current.replyToFeedback(feedbackId, text);

    if (result.success) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –æ—á–∏—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      setAllFeedbacks(prev => prev.filter(f => f.id !== feedbackId));
      setAiReplies(prev => {
        const newReplies = { ...prev };
        delete newReplies[feedbackId];
        return newReplies;
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (stats) {
        setStats(prev => prev ? ({
          ...prev,
          countUnanswered: Math.max(0, prev.countUnanswered - 1)
        }) : null);
      }
    } else {
      setError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${result.errorText}`);
    }

    setLoading(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleRatingChange = (rating: number, checked: boolean) => {
    if (checked) {
      setSelectedRatings(prev => [...prev, rating].sort());
    } else {
      setSelectedRatings(prev => prev.filter(r => r !== rating));
    }
  };

  const handleSelectAllRatings = () => {
    setSelectedRatings([1, 2, 3, 4, 5]);
  };

  const handleClearAllRatings = () => {
    setSelectedRatings([]);
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–∞
  const FilterDropdown = () => {
    const ratingCounts = [1, 2, 3, 4, 5].map(rating => ({
      rating,
      count: allFeedbacks.filter(f => f.productValuation === rating).length
    }));

    const mediaCounts = {
      withMedia: allFeedbacks.filter(f => !!(f.photoLinks?.length || f.video)).length,
      withoutMedia: allFeedbacks.filter(f => !(f.photoLinks?.length || f.video)).length
    };

    return (
      <div style={{ padding: 16, width: 300 }}>
        <Space direction="vertical" size="middle" style={{ width: '100%' }}>
          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É */}
          <div>
            <div style={{ marginBottom: 8, fontWeight: 'bold' }}>
              <StarOutlined /> –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ü–µ–Ω–∫–∞–º
            </div>
            <Space direction="vertical" size="small" style={{ width: '100%' }}>
              {ratingCounts.map(({ rating, count }) => (
                <div key={rating} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Checkbox
                    checked={selectedRatings.includes(rating)}
                    onChange={(e) => handleRatingChange(rating, e.target.checked)}
                  >
                    <Rate disabled value={rating} style={{ fontSize: 12 }} />
                  </Checkbox>
                  <Tag color={count > 0 ? 'blue' : 'default'}>{count}</Tag>
                </div>
              ))}
              <Divider style={{ margin: '8px 0' }} />
              <Space>
                <Button size="small" onClick={handleSelectAllRatings}>–í—Å–µ</Button>
                <Button size="small" onClick={handleClearAllRatings}>–û—á–∏—Å—Ç–∏—Ç—å</Button>
              </Space>
            </Space>
          </div>

          <Divider style={{ margin: 0 }} />

          {/* –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º */}
          <div>
            <div style={{ marginBottom: 8, fontWeight: 'bold' }}>
              <PictureOutlined /> –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º
            </div>
            <Space direction="vertical" size="small" style={{ width: '100%' }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Checkbox
                  checked={hasMedia === null}
                  onChange={() => setHasMedia(null)}
                >
                  –í—Å–µ –æ—Ç–∑—ã–≤—ã
                </Checkbox>
                <Tag color="default">{allFeedbacks.length}</Tag>
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Checkbox
                  checked={hasMedia === true}
                  onChange={() => setHasMedia(true)}
                >
                  –° –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
                </Checkbox>
                <Tag color={mediaCounts.withMedia > 0 ? 'blue' : 'default'}>{mediaCounts.withMedia}</Tag>
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Checkbox
                  checked={hasMedia === false}
                  onChange={() => setHasMedia(false)}
                >
                  –ë–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                </Checkbox>
                <Tag color={mediaCounts.withoutMedia > 0 ? 'blue' : 'default'}>{mediaCounts.withoutMedia}</Tag>
              </div>
            </Space>
          </div>
        </Space>
      </div>
    );
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –µ—Å—Ç—å –≤ .env
  useEffect(() => {
    const envWbToken = import.meta.env.VITE_WB;
    const envOpenaiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (envWbToken && envOpenaiKey && !isConnected) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –µ—Å—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      connect();
    }
  }, []);

  useEffect(() => {
    if (isConnected) {
      loadFeedbacks();
    }
  }, [activeTab, isConnected]);

  if (!isConnected) {
    return (
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: '#1890ff',
          },
        }}
      >
        <Layout style={{ minHeight: '100vh', backgroundColor: '#f0f2f5' }}>
          <Content style={{ padding: '50px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
            <Card style={{ width: '100%', maxWidth: 600 }}>
              <Space direction="vertical" size="large" style={{ width: '100%' }}>
                <div style={{ textAlign: 'center' }}>
                  <Title level={2}>
                    <RobotOutlined style={{ color: '#1890ff' }} /> Wildberries Reviews AI Agent
                  </Title>
                </div>

                <Title level={3}>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</Title>

                <Form layout="vertical">
                  <Form.Item label="Wildberries API Token">
                    <Input.Password
                      value={wbToken}
                      onChange={(e) => setWbToken(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω WB"
                      size="large"
                    />
                  </Form.Item>

                  <Form.Item label="OpenAI API Key">
                    <Input.Password
                      value={openaiKey}
                      onChange={(e) => setOpenaiKey(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á OpenAI"
                      size="large"
                    />
                  </Form.Item>

                  {error && (
                    <Alert
                      message={error}
                      type="error"
                      showIcon
                      style={{ marginBottom: 16 }}
                    />
                  )}

                  <Button
                    type="primary"
                    size="large"
                    loading={loading}
                    onClick={connect}
                    block
                  >
                    {loading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'}
                  </Button>
                </Form>

                <Alert
                  message="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:"
                  description={
                    <div>
                      <ol style={{ paddingLeft: 20, margin: 0 }}>
                        <li>–ü–æ–ª—É—á–∏—Ç–µ API —Ç–æ–∫–µ–Ω WB –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API)</li>
                        <li>–ü–æ–ª—É—á–∏—Ç–µ OpenAI API –∫–ª—é—á –Ω–∞ platform.openai.com</li>
                        <li>–ú–æ–¥–µ–ª—å GPT-4o mini —Å—Ç–æ–∏—Ç $0.15/1M –≤—Ö–æ–¥–Ω—ã—Ö –∏ $0.60/1M –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</li>
                        <li>–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"</li>
                      </ol>
                      <div style={{ marginTop: 12, padding: 8, backgroundColor: '#f0f0f0', borderRadius: 4 }}>
                        <strong>üí° –°–æ–≤–µ—Ç:</strong> –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª <code>.env</code> —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:
                        <br />
                        <code>VITE_WB=–≤–∞—à_—Ç–æ–∫–µ–Ω_wb</code>
                        <br />
                        <code>VITE_OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á_openai</code>
                      </div>
                    </div>
                  }
                  type="info"
                  showIcon
                />
              </Space>
            </Card>
          </Content>
        </Layout>
      </ConfigProvider>
    );
  }

  const tabItems = [
    {
      key: 'unanswered',
      label: '–ë–µ–∑ –æ—Ç–≤–µ—Ç–∞',
      children: null
    },
    {
      key: 'answered',
      label: '–° –æ—Ç–≤–µ—Ç–∞–º–∏',
      children: null
    }
  ];

  const activeFiltersCount = (selectedRatings.length !== 5 ? 1 : 0) + (hasMedia !== null ? 1 : 0);

  return (
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: '#1890ff',
        },
      }}
    >
      <Layout style={{ minHeight: '100vh' }}>
        {/* –•–µ–¥–µ—Ä */}
        <Header style={{ backgroundColor: '#fff', boxShadow: '0 2px 8px rgba(0,0,0,0.1)' }}>
          <Row justify="space-between" align="middle" style={{ height: '100%' }}>
            <Col>
              <Space direction="vertical" size={0}>
                <Title level={3} style={{ margin: 0, color: '#1890ff' }}>
                  <RobotOutlined /> Wildberries Reviews AI
                </Title>
                {stats && (
                  <Text type="secondary">
                    –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞: {stats.countUnanswered} ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: {stats.valuation} ‚Ä¢ 
                    –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {allFeedbacks.length} ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredFeedbacks.length}
                    {allFeedbacks.some(f => f.answer) && (
                      <span> ‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {allFeedbacks.filter(f => f.answer).length}</span>
                    )}
                  </Text>
                )}
              </Space>
            </Col>
            
            <Col>
              <Space>
                <Dropdown
                  popupRender={() => <div>{FilterDropdown()}</div>}
                  trigger={['click']}
                  placement="bottomRight"
                >
                  <Button icon={<FilterOutlined />}>
                    –§–∏–ª—å—Ç—Ä—ã
                    {activeFiltersCount > 0 && (
                      <Badge count={activeFiltersCount} size="small" style={{ marginLeft: 8 }} />
                    )}
                  </Button>
                </Dropdown>
                <Button
                  icon={<SettingOutlined />}
                  onClick={() => setShowSettings(!showSettings)}
                >
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI
                </Button>
                <Button
                  type="primary"
                  icon={<ReloadOutlined spin={loading} />}
                  loading={loading}
                  onClick={loadFeedbacks}
                >
                  –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
              </Space>
            </Col>
          </Row>
        </Header>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI */}
        <Drawer
          title="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è AI"
          placement="right"
          open={showSettings}
          onClose={() => setShowSettings(false)}
          width={400}
        >
          <Space direction="vertical" size="middle" style={{ width: '100%' }}>
            <Text>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ AI:
            </Text>
            <TextArea
              value={aiInstructions}
              onChange={(e) => setAiInstructions(e.target.value)}
              rows={6}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–∫–∏–¥–∫—É 10% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑..."
            />
            <Alert
              message="–°–æ–≤–µ—Ç"
              description="–ß–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã –¥–∞–¥–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–µ –±—É–¥—É—Ç –æ—Ç–≤–µ—Ç—ã AI."
              type="info"
              showIcon
            />
          </Space>
        </Drawer>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <Content style={{ padding: '24px', backgroundColor: '#f0f2f5' }}>
          <div style={{ maxWidth: 1200, margin: '0 auto' }}>
            <Tabs
              activeKey={activeTab}
              onChange={setActiveTab}
              items={tabItems}
              style={{ marginBottom: 24 }}
            />

            {/* –û—à–∏–±–∫–∏ */}
            {error && (
              <Alert
                message={error}
                type="error"
                showIcon
                closable
                onClose={() => setError('')}
                style={{ marginBottom: 16 }}
              />
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö */}
            {filteredFeedbacks.some(f => f.photoLinks?.length || f.video) && (
              <Alert
                message="üì∏ –ì–∞–ª–µ—Ä–µ—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"
                description={
                  <div>
                    <p style={{ margin: 0, marginBottom: 8 }}>
                      <strong>üñºÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º:</strong> –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ª—é–±—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞–Ω–∏—è.
                    </p>
                    <ul style={{ margin: 0, paddingLeft: 16 }}>
                      <li><strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> –°—Ç—Ä–µ–ª–∫–∏ ‚Üê ‚Üí –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ –≥–∞–ª–µ—Ä–µ–µ</li>
                      <li><strong>–ú–∏–Ω–∏–∞—Ç—é—Ä—ã:</strong> –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å–Ω–∏–∑—É</li>
                      <li><strong>–ü–æ–ª–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:</strong> –ö–ª–∏–∫ –ø–æ –±–æ–ª—å—à–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–∫—Ä–æ–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ</li>
                      <li><strong>–í–∏–¥–µ–æ:</strong> HLS (.m3u8) —Ñ–∞–π–ª—ã –ª—É—á—à–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ</li>
                      <li><strong>–ü—Ä–æ–∫—Å–∏:</strong> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS</li>
                    </ul>
                  </div>
                }
                type="success"
                showIcon
                closable
                style={{ marginBottom: 16 }}
              />
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –æ—Ç–≤–µ—Ç–æ–≤ */}
            {filteredFeedbacks.some(f => f.answer) && (
              <Alert
                message="üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"
                description={
                  <div>
                    <p style={{ margin: 0, marginBottom: 8 }}>
                      <strong>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:</strong> –¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
                    </p>
                    <ul style={{ margin: 0, paddingLeft: 16 }}>
                      <li><strong>‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:</strong> –û—Ç–≤–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Wildberries</li>
                      <li><strong>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:</strong> –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π WB</li>
                      <li><strong>üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π:</strong> –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –¥–Ω–µ–π</li>
                      <li><strong>–ö–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞:</strong> –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –ª–æ–≥–∞—Ö</li>
                    </ul>
                  </div>
                }
                type="info"
                showIcon
                closable
                style={{ marginBottom: 16 }}
              />
            )}

            {/* –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ */}
            {loading && !filteredFeedbacks.length ? (
              <div style={{ textAlign: 'center', padding: '50px 0' }}>
                <Spin size="large" />
                <div style={{ marginTop: 16 }}>
                  <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...</Text>
                </div>
              </div>
            ) : filteredFeedbacks.length === 0 ? (
              <Empty
                image={Empty.PRESENTED_IMAGE_SIMPLE}
                description={
                  allFeedbacks.length === 0 
                    ? "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    : "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º"
                }
                style={{ padding: '50px 0' }}
              />
            ) : (
              <div>
                {filteredFeedbacks.map(feedback => (
                  <FeedbackCard
                    key={feedback.id}
                    feedback={feedback}
                    aiReply={aiReplies[feedback.id]}
                    onGenerateReply={generateReply}
                    onReply={sendReply}
                    isGenerating={generatingFor === feedback.id}
                  />
                ))}
              </div>
            )}
          </div>
        </Content>
      </Layout>
    </ConfigProvider>
  );
}